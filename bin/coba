#!/usr/bin/env ruby

require "thor"
require "json"
require "fileutils"
require "coba-testrunner"

class Coba < Thor
  desc "test configFile [browser]", "Testing based on configFile and/or specific Browser"
  long_desc <<-LONGDESC
    coba test will test your test suite agains specific browser and input

    You can optionally specify browser and this browser will override browser that you specify
    on configFile

    ex :\n
    > $./coba test configFile.json\n
    > $./coba test configFile.json firefox
  LONGDESC
  def test(configFile, browser=nil)
    puts "Testing based on #{configFile}"

    # 1. read configFile
    # error when not found
    # error when json not valid

    if File.exist? "#{Dir.pwd}/#{configFile}"
      file = File.read("#{Dir.pwd}/#{configFile}")
    else
      raise "File #{configFile} doesn't exist"
    end

    config = JSON.parse(file)

    # 2. get test Cases
    # error when not found
    # error when json not valid

    if File.exist?(config['data'])
      testFile = File.read(config['data'])
    else
      raise "File #{config['data']} doesn't exist"
    end

    testCases = JSON.parse(testFile)

    # 3. get browser
    # isArray? isString?
    # String push ke array
    # Array loop
    arrayOfBrowser = Array.new

    if browser === nil
      browser = config['browsers']
    end

    if browser.instance_of? String
      arrayOfBrowser << browser
    else
      arrayOfBrowser = browser
    end

    arrayOfBrowser.each_with_index do |browser,index|
      # 4. Create config for single browser
      singleBrowserConfig = config;
      singleBrowserConfig["browsers"] = browser

      # variable untuk menyimpan hasil
      logs = Array.new

      # 5. Loop Test Cases hasil generate
      testCases.each_with_index do |testCase,testIndex|
        # 5. Create object Test
          singleBrowserConfig['keyIndex'] = testIndex
          test = TestRunner.new(singleBrowserConfig)

          # - init
          statusTest = 0
          memoryUsage = Array.new
            test.init()
            # driver init
            # screenshot after init (if config set to true)
          # RAM Calculation
            # Create Thread, combine, and count average
            t = Thread.new{
                accumulator = 0
                while statusTest != 1 do
                    output = `tasklist /FO CSV | grep #{singleBrowserConfig['browsers']}.exe`
                    puts output
                    puts "========"
                    csvData = CSV.parse(output)
                    csvData.each do |data|
                        accumulator = accumulator + data.last.sub(",","").sub("K","").to_i
                    end
                    memoryUsage << accumulator
                    accumulator = 0
                end
            }
          # - start
            test.start(testCase)
            # - before Hook (if available)
              # Log Time
              # screenshot before and after test (if config set to true)
            # - Execution
              # Log Time
              # screenshot before and after test (if config set to true)
            # - after Hook (if available)
              # Log Time
              # screenshot before and after test (if config set to true)
          # - stop
            statusTest = 1;
            t.join
            result = test.stop()
            result['memory'] = memoryUsage
            # driver quit

          # compose result
          logs.push(result)
      end

      # 6. Ketika selesai atau throw error save log (JSON) ke dalam sebuah file dengan alamat cwd()+log+browserName
      # tapi sebelumnya harus di ambil dulu isi file sebelumnya
      logPath = "#{Dir.pwd}/log/#{browser}"
      if !Dir.exist? "#{logPath}/"
        FileUtils::mkdir_p "#{logPath}/"
      end

      preloadedData = Array.new
      if File.exist?("#{logPath}/#{browser}.json")
        logFile = File.read("#{logPath}/#{browser}.json")
        preloadedData = JSON.parse(logFile)
      end

      # puts preloadedData
      preloadedData.concat(logs)

      File.open("#{logPath}/#{browser}.json","w") do |f|
        f.write(JSON.pretty_generate preloadedData)
      end
    end


  end


  desc "generate type", "[IN PROGRESS] Generate data for testing purpose"
  long_desc <<-LONGDESC
    coba generate will generate data for your test suite base on validation rule/something else :p

    ex :\n
    > $./coba generate input\n
    > $./coba generate output
  LONGDESC
  def generate(type)
    puts "Generate on #{type} data"
  end

  desc "init", "Prepare boilerplate file for testing "
  long_desc <<-LONGDESC
    coba init will generate skeleton file for your testing purpose

    ex :\n
    > $./coba init
  LONGDESC
  def init
    dir = File.dirname(File.expand_path(__FILE__))
    FileUtils.copy_entry dir+"/../lib/template/", Dir.pwd+"/"
  end

  desc "split file chunk", "Split big testcase into some little file"
  long_desc <<-LONGDESC
    coba split will split big testcase file into several file so you can test it chunck by chunk
    chunk is testcase length

    ex :\n
    > $./coba split 128
  LONGDESC
  def split(file, chunk)
    puts "Spliting file"

    if File.exist?(file)
      testFile = File.read(file)
    else
      raise "File #{file} doesn't exist"
    end

    testCases = JSON.parse(testFile)
    puts "Test Cases Count : #{testCases.length}"

    count = testCases.length / chunk.to_f
    count = count.ceil

    chunkTestCases = []
    testCases.each.with_index(1) do |testCase,testIndex|
      chunkTestCases << testCase 
      if (testIndex % chunk.to_i) === 0 || testIndex === testCases.length
        filename = File.basename(file,".json")
        number = (testIndex / chunk.to_f).ceil
        puts "Compiling Test Cases : #{number} of #{count}"
        File.open("#{Dir.pwd}/#{filename}-#{number.to_i}-of-#{count}.json","w") do |f|
          f.write(JSON.pretty_generate chunkTestCases)
        end
        chunkTestCases = []
      end
    end
    puts "Spliting file finished"
  end

end

Coba.start(ARGV)
