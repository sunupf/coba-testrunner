#!/usr/bin/env ruby

require "thor"
require "json"
require "fileutils"
require "coba-testrunner"
require "selenium-webdriver"
require "thread"
# $DEBUG = true

class Coba < Thor
  desc "test configFile [browser]", "Testing based on configFile and/or specific Browser"
  long_desc <<-LONGDESC
    coba test will test your test suite agains specific browser and input

    You can optionally specify browser and this browser will override browser that you specify
    on configFile

    ex :\n
    > $./coba test configFile.json\n
    > $./coba test configFile.json firefox
  LONGDESC
  def test(configFile, browser=nil)
    port_range = (7400..7500).to_a
    port_length = port_range.length - 1

    Thread.abort_on_exception=true
    puts "Testing based on #{configFile}"

    # 1. read configFile
    # error when not found
    # error when json not valid

    if File.exist? "#{Dir.pwd}/#{configFile}"
      file = File.read("#{Dir.pwd}/#{configFile}")
    else
      raise "File #{configFile} doesn't exist"
    end

    config = JSON.parse(file)

    # 2. get test Cases
    # error when not found
    # error when json not valid

    if File.exist?(config['data'])
      testFile = File.read(config['data'])
    else
      raise "File #{config['data']} doesn't exist"
    end

    testCases = JSON.parse(testFile)
    # testCases = [0,1,2,3]


    # 3. get browser
    # isArray? isString?
    # String push ke array
    # Array loop
    arrayOfBrowser = Array.new

    if browser === nil
      browser = config['browsers']
    end
    if browser.instance_of? String
      arrayOfBrowser << browser
    else
      arrayOfBrowser = browser
    end


    arrayOfBrowser.each_with_index do |browser,index|
      # 4. Create config for single browser
      singleBrowserConfig = config;
      singleBrowserConfig["browsers"] = browser

      threadLimit = 1
      if(!config['threadLimit'].nil? || config['threadLimit'].to_i > 0 )
        threadLimit = config['threadLimit']
      end

      logs = Hash.new
      logs['data'] = Array.new
      logs['time'] = Array.new
      logTime = Hash.new
      th = Array.new

      workQueue = Queue.new
      testCases.each{|x| workQueue << x }
      
      portQueue = Queue.new
      (0..(threadLimit*2-1)).each{|x| 
        portQueue << port_range[rand(port_length)]
      }
      # puts portQueue.length

      logTime['start'] = Time.new

      memoryUsage = Array.new

      semaphore = Mutex.new

      statusTest = 0

      thMemory = Thread.new{
          accumulator = 0
          while statusTest != 1 do
              output = `tasklist /FO CSV | grep #{singleBrowserConfig['browsers']}.exe`
              # puts output
              # puts "========"
              csvData = CSV.parse(output)
              csvData.each do |data|
                  accumulator = accumulator + data.last.sub(",","").sub("K","").to_i
              end
              if accumulator > 0
                memoryUsage << accumulator
                accumulator = 0
              end
          end
      }

      worker = (0..(threadLimit-1)).map do |workerIndex|

          Thread.new(workerIndex){ |threadIndex|
            test = TestRunner.new(singleBrowserConfig)
            port = portQueue.pop(true)
            
            if browser == "firefox" 
              marionettePort = portQueue.pop(true)
            end
            
            # puts "Port used on thread #{threadIndex} : #{port}"
            # puts "Marionette Port used on thread #{threadIndex} : #{marionettePort}"

            if(config['alwaysInitiate'].nil? || config['alwaysInitiate'] != true  )
              if browser == "firefox" 
                test.init(port,marionettePort)
              else
                test.init(port)
              end

            end
            until workQueue.empty?
              if(!config['alwaysInitiate'].nil? || config['alwaysInitiate'] == true  )
                test.init(port)
              end

              index = 0
              semaphore.synchronize{
                index = testCases.length - workQueue.length
                test.index= index
              }

              begin
                inputsTestCases = workQueue.pop(true)
                # - init
                  # driver init
                  # screenshot after init (if config set to true)
                
                # - start
                test.start(inputsTestCases)
                  # - before Hook (if available)
                    # Log Time
                    # screenshot before and after test (if config set to true)
                  # - Execution
                    # Log Time
                    # screenshot before and after test (if config set to true)
                  # - after Hook (if available)
                    # Log Time
                    # screenshot before and after test (if config set to true)
                # - stop
                result = test.stop()
                logs['data'] << result
              rescue Exception => e
                # puts "Thread index : #{threadIndex} - testCase : #{index}"
                # raise e
              end
              if(!config['alwaysInitiate'].nil? || config['alwaysInitiate'] == "true"  )
                test.end
              end
            end
            if(config['alwaysInitiate'].nil? || config['alwaysInitiate'] != "true" )
              test.end
            end
          }
      end

      worker.each{|t|
          if(!t.nil?)
              t.join
          end
      }

      statusTest = 1
      thMemory.join

      logTime['end'] = Time.new
      logTime['time'] = logTime['end'] - logTime['start']
      # 6. Ketika selesai atau throw error save log (JSON) ke dalam sebuah file dengan alamat cwd()+log+browserName
      # tapi sebelumnya harus di ambil dulu isi file sebelumnya
      logPath = "#{Dir.pwd}/log/#{browser}"
      if !Dir.exist? "#{logPath}/"
        FileUtils::mkdir_p "#{logPath}/"
      end

      preloadedData = Hash.new
      preloadedData['data'] = Array.new
      preloadedData['time'] = Array.new
      preloadedData['memory'] = Array.new
      if File.exist?("#{logPath}/#{browser}.json")
        logFile = File.read("#{logPath}/#{browser}.json")
        preloadedData = JSON.parse(logFile)
      end

      # puts preloadedData
      preloadedData['data'].concat(logs['data'])
      preloadedData['time'] << logTime
      preloadedData['memory'] << memoryUsage

      File.open("#{logPath}/#{browser}.json","w") do |f|
        f.write(JSON.pretty_generate preloadedData)
      end
    end #end of each with index
  end #end of def

  desc "generate type", "[IN PROGRESS] Generate data for testing purpose"
  long_desc <<-LONGDESC
    coba generate will generate data for your test suite base on validation rule/something else :p

    ex :\n
    > $./coba generate input\n
    > $./coba generate output
  LONGDESC
  def generate(type)
    puts "Generate on #{type} data"
  end

  desc "init", "Prepare boilerplate file for testing "
  long_desc <<-LONGDESC
    coba init will generate skeleton file for your testing purpose

    ex :\n
    > $./coba init
  LONGDESC
  def init
    dir = File.dirname(File.expand_path(__FILE__))
    FileUtils.copy_entry dir+"/../lib/template/", Dir.pwd+"/"
  end

  desc "split file chunk", "Split big testcase into some little file"
  long_desc <<-LONGDESC
    coba split will split big testcase file into several file so you can test it chunck by chunk
    chunk is testcase length

    ex :\n
    > $./coba split 128
  LONGDESC
  def split(file, chunk)
    puts "Spliting file"

    if File.exist?(file)
      testFile = File.read(file)
    else
      raise "File #{file} doesn't exist"
    end

    testCases = JSON.parse(testFile)
    puts "Test Cases Count : #{testCases.length}"

    count = testCases.length / chunk.to_f
    count = count.ceil

    chunkTestCases = []
    testCases.each.with_index(1) do |testCase,testIndex|
      chunkTestCases << testCase 
      if (testIndex % chunk.to_i) === 0 || testIndex === testCases.length
        filename = File.basename(file,".json")
        number = (testIndex / chunk.to_f).ceil
        puts "Compiling Test Cases : #{number} of #{count}"
        File.open("#{Dir.pwd}/#{filename}-#{number.to_i}-of-#{count}.json","w") do |f|
          f.write(JSON.pretty_generate chunkTestCases)
        end
        chunkTestCases = []
      end
    end
    puts "Spliting file finished"
  end

end

Coba.start(ARGV)
